// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(UniversityContext))]
    partial class UniversityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Aggregate.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<bool>("Deprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseId")
                        .HasName("PK_Course");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Aggregate.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StudentId")
                        .HasName("PK_Student");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CourseModule", b =>
                {
                    b.Property<int>("CourseModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseModuleId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CourseModuleId")
                        .HasName("PK_CourseModule");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseModule", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EnrolledCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("LearningPlanId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "LearningPlanId")
                        .HasName("PK_EnrolledCourse");

                    b.HasIndex("LearningPlanId");

                    b.ToTable("EnrolledCourse", (string)null);
                });

            modelBuilder.Entity("Domain.Models.LearningPlan", b =>
                {
                    b.Property<int>("LearningPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearningPlanId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("LearningPlanId")
                        .HasName("PK_LearningPlan");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("LearningPlan", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MarkedModule", b =>
                {
                    b.Property<int>("CourseModuleId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("LearningPlanId")
                        .HasColumnType("int");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.HasKey("CourseModuleId", "CourseId", "LearningPlanId")
                        .HasName("PK_ModuleMark");

                    b.HasIndex("LearningPlanId", "CourseId");

                    b.ToTable("ModuleMark", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Aggregate.Student", b =>
                {
                    b.OwnsOne("Domain.Models.VObject.Email", "Email", b1 =>
                        {
                            b1.Property<int>("StudentId")
                                .HasColumnType("int");

                            b1.Property<string>("address")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("Email");

                            b1.HasKey("StudentId");

                            b1.ToTable("Student");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.CourseModule", b =>
                {
                    b.HasOne("Domain.Models.Aggregate.Course", null)
                        .WithMany("CourseModules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.EnrolledCourse", b =>
                {
                    b.HasOne("Domain.Models.Aggregate.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.LearningPlan", null)
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("LearningPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Domain.Models.VObject.DateTimeRange", "DateTimeRange", b1 =>
                        {
                            b1.Property<int>("EnrolledCourseCourseId")
                                .HasColumnType("int");

                            b1.Property<int>("EnrolledCourseLearningPlanId")
                                .HasColumnType("int");

                            b1.Property<DateOnly?>("EndTime")
                                .HasColumnType("date")
                                .HasColumnName("EndDate");

                            b1.Property<DateOnly>("StartTime")
                                .HasColumnType("date")
                                .HasColumnName("StartDate");

                            b1.HasKey("EnrolledCourseCourseId", "EnrolledCourseLearningPlanId");

                            b1.ToTable("EnrolledCourse");

                            b1.WithOwner()
                                .HasForeignKey("EnrolledCourseCourseId", "EnrolledCourseLearningPlanId");
                        });

                    b.Navigation("DateTimeRange")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.LearningPlan", b =>
                {
                    b.HasOne("Domain.Models.Aggregate.Student", null)
                        .WithOne("LearningPlan")
                        .HasForeignKey("Domain.Models.LearningPlan", "StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.MarkedModule", b =>
                {
                    b.HasOne("Domain.Models.CourseModule", null)
                        .WithMany()
                        .HasForeignKey("CourseModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.EnrolledCourse", null)
                        .WithMany("MarkedModules")
                        .HasForeignKey("LearningPlanId", "CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Aggregate.Course", b =>
                {
                    b.Navigation("CourseModules");
                });

            modelBuilder.Entity("Domain.Models.Aggregate.Student", b =>
                {
                    b.Navigation("LearningPlan")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.EnrolledCourse", b =>
                {
                    b.Navigation("MarkedModules");
                });

            modelBuilder.Entity("Domain.Models.LearningPlan", b =>
                {
                    b.Navigation("EnrolledCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
