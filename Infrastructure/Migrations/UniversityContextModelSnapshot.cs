// <auto-generated />
using System;
using ApplicationCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(UniversityContext))]
    partial class UniversityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<bool>("Deprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseId")
                        .HasName("PK_Course");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DataLayer.Models.CourseModule", b =>
                {
                    b.Property<int>("CourseModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseModuleId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CourseModuleId")
                        .HasName("PK_CourseModule");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseModules");
                });

            modelBuilder.Entity("DataLayer.Models.IndividualCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("LearningPlanId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("CourseId", "LearningPlanId")
                        .HasName("PK_IndividualCourse");

                    b.HasIndex("LearningPlanId");

                    b.ToTable("IndividualCourses");
                });

            modelBuilder.Entity("DataLayer.Models.LearningPlan", b =>
                {
                    b.Property<int>("LearningPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearningPlanId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("LearningPlanId")
                        .HasName("PK_LearningPlan");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("LearningPlans");
                });

            modelBuilder.Entity("DataLayer.Models.ModuleMark", b =>
                {
                    b.Property<int>("CourseModuleId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.HasKey("CourseModuleId", "StudentId")
                        .HasName("PK_ModuleMark");

                    b.HasIndex("StudentId");

                    b.ToTable("ModuleMarks");
                });

            modelBuilder.Entity("DataLayer.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StudentId")
                        .HasName("PK_Student");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DataLayer.Models.CourseModule", b =>
                {
                    b.HasOne("DataLayer.Models.Course", "Course")
                        .WithMany("CourseModules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DataLayer.Models.IndividualCourse", b =>
                {
                    b.HasOne("DataLayer.Models.Course", "Course")
                        .WithMany("IndividualCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.LearningPlan", "LearningPlan")
                        .WithMany("IndividualCourses")
                        .HasForeignKey("LearningPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("LearningPlan");
                });

            modelBuilder.Entity("DataLayer.Models.LearningPlan", b =>
                {
                    b.HasOne("DataLayer.Models.Student", "Student")
                        .WithOne("LearningPlan")
                        .HasForeignKey("DataLayer.Models.LearningPlan", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataLayer.Models.ModuleMark", b =>
                {
                    b.HasOne("DataLayer.Models.CourseModule", "CourseModule")
                        .WithMany("ModuleMarks")
                        .HasForeignKey("CourseModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Student", "Student")
                        .WithMany("ModuleMarks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseModule");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataLayer.Models.Course", b =>
                {
                    b.Navigation("CourseModules");

                    b.Navigation("IndividualCourses");
                });

            modelBuilder.Entity("DataLayer.Models.CourseModule", b =>
                {
                    b.Navigation("ModuleMarks");
                });

            modelBuilder.Entity("DataLayer.Models.LearningPlan", b =>
                {
                    b.Navigation("IndividualCourses");
                });

            modelBuilder.Entity("DataLayer.Models.Student", b =>
                {
                    b.Navigation("LearningPlan");

                    b.Navigation("ModuleMarks");
                });
#pragma warning restore 612, 618
        }
    }
}
